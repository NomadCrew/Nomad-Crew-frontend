App.vue```
<template>
  <ion-app>
    <ion-router-outlet />
  </ion-app>
</template>

<script lang="ts">
import { IonApp, IonRouterOutlet } from '@ionic/vue';
import { defineComponent } from 'vue';

export default defineComponent({
  name: 'App',
  components: {
    IonApp,
    IonRouterOutlet
  }
});
</script>
```
components\ExploreContainer.vue```
<template>
  <div id="container">
    <strong>{{ name }}</strong>
    <p>Explore <a target="_blank" rel="noopener noreferrer" href="https://ionicframework.com/docs/components">UI Components</a></p>
  </div>
</template>

<script setup lang="ts">
defineProps({
  name: String,
});
</script>

<style scoped>
#container {
  text-align: center;
  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

#container strong {
  font-size: 20px;
  line-height: 26px;
}

#container p {
  font-size: 16px;
  line-height: 22px;
  color: #8c8c8c;
  margin: 0;
}

#container a {
  text-decoration: none;
}
</style>

```
components\LoginButton.vue```
<template>
    <ion-button @click="login">Log in</ion-button>
  </template>
  
  <script lang="ts">
  import { defineComponent } from "vue";
  import { IonApp, IonRouterOutlet } from "@ionic/vue";
  
  import { useAuth0 } from "@auth0/auth0-vue";
  import { App as CapApp } from "@capacitor/app";
  import { IonButton } from "@ionic/vue";
  import { Browser } from "@capacitor/browser";
  
  export default defineComponent({
    components: {
    IonButton,
    },
    setup() {
      const { loginWithRedirect } = useAuth0();
  
      const login = async () => {
        await loginWithRedirect({
          openUrl: (url: string) =>
            Browser.open({
              url,
              windowName: "_self",
            }),
        });
      };
  
      return { login };
    },
  });
  </script>
```
components\LogoutButton.vue```
<template>
    <ion-button @click="onLogout">Log out</ion-button>
  </template>
  
  <script lang="ts">
  import { defineComponent } from "vue";
  import { useAuth0 } from "@auth0/auth0-vue";
  import { Browser } from "@capacitor/browser";
  import { IonButton } from "@ionic/vue";
  import { callbackUri } from "../../auth.config";
  
  export default defineComponent({
    components: {
      IonButton,
    },
    setup() {
      const { logout } = useAuth0();
  
      const onLogout = async () => {
        await logout({
          logoutParams: {
            returnTo: callbackUri,
          },
          openUrl: (url: string) =>
            Browser.open({
              url,
              windowName: "_self",
            }),
        });
      };
  
      return {
        onLogout,
      };
    },
  });
  </script>
```
components\UserProfile.vue```
<template>
    <div v-if="isLoading">Loading ...</div>
    <div v-else-if="!user"></div>
    <div v-else class="profile-container">
      <ion-avatar>
        <img :src="user.picture" :alt="user.name" />
      </ion-avatar>
      <h2>{{ user.name }}</h2>
      <p>{{ user.email }}</p>
    </div>
  </template>
  
  <script lang="ts">
  import { defineComponent } from "vue";
  import { useAuth0 } from "@auth0/auth0-vue";
  import { IonAvatar } from "@ionic/vue";
  
  export default defineComponent({
    components: {
      IonAvatar,
    },
    setup() {
      const { user, isLoading } = useAuth0();
  
      return { user, isLoading };
    },
  });
  </script>
  
```
views\HomePage.vue```
<template>
  <ion-page>
    <ion-header :translucent="true">
      <ion-toolbar>
        <ion-title>Blank</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content :fullscreen="true">
      <ion-button @click="signInWithGoogle">GOOGLE AUTH</ion-button>
      <ion-button @click="signInWithTwitter" disabled>TWITTER AUTH</ion-button>
      <div>
        {{ JSON.stringify(error) }}
      </div>
      <div style="margin-top: 12px">
        <ion-card>
          <ion-card-content>
            <ion-item>
              <ion-label>EMAIL</ion-label>
              <ion-input v-model="email" type="text" required></ion-input>
            </ion-item>
            <ion-item>
              <ion-label>PASSWORD</ion-label>
              <ion-input v-model="password" type="password"></ion-input>
            </ion-item>
            <ion-button @click="signIn">SIGN IN WITH EMAIL</ion-button>
          </ion-card-content>
        </ion-card>
      </div>
      <div style="margin-top: 12px">
        <div name="sign-in-button" id="sign-in-button"></div>
        <ion-card>
          <ion-card-content>
            <ion-item>
              <ion-label>PHONE NUMBER</ion-label>
              <ion-input v-model="phoneNumberRef" type="text" required></ion-input>
            </ion-item>
            <ion-button @click="signInWithPhoneNumber"
              >SIGN IN WITH PHONE NUMBER</ion-button
            >
          </ion-card-content>
        </ion-card>
      </div>
    </ion-content>
  </ion-page>
</template>

<script lang="ts" setup>
import {
  IonContent,
  IonHeader,
  IonPage,
  IonTitle,
  IonToolbar,
  IonButton,
  onIonViewWillEnter,
  IonItem,
  IonLabel,
  IonInput,
  IonCard,
  IonCardContent,
} from "@ionic/vue";
import { onMounted, ref, watch } from "vue";
import {
  currentUser,
  fb_signInWithGoogle,
  fb_signInWithEmailAndPassword,
  fb_signInWithPhoneNumber,
  fb_signInWithTwitter,
} from "@/firebase/firebase-service";
import { useRouter } from "vue-router";
const email = ref("");
const password = ref("");
const phoneNumberRef = ref("");
const error = ref<any>();
const router = useRouter();

onIonViewWillEnter(async () => {
  console.log("onIonViewWillEnter", currentUser);
});

onMounted(() => {
  console.log("onMounted", currentUser);
});

watch(currentUser, () => {
  if (currentUser?.value?.uid) {
    router.replace("/private");
  }
});

/**
 *
 *  WORKING !!
 *
 *  @description sign in with email and password
 */
const signIn = async () => {
  try {
    await fb_signInWithEmailAndPassword(email.value, password.value);
  } catch (_error: any) {
    console.log(_error);
    error.value = _error.message;
  }
};
/**
 *
 *  WORKING !!
 *
 *  @description Sign in with Google.
 */
const signInWithGoogle = async () => {
  try {
    await fb_signInWithGoogle();
  } catch (_error: any) {
    console.log(_error);
    error.value = _error.message;
  }
};

/**
 *
 * @description Sign in with Twitter.
 */
const signInWithTwitter = async () => {
  try {
    await fb_signInWithTwitter();
  } catch (_error: any) {
    console.log(_error);
    error.value = _error?.message;
  }
};

/**
 *
 *  WORKING !!
 *
 * @description Sign in with phone number, first check and if on the web, then
 *  sign in with web version of this call. @see signInWithPhoneNumber_web
 */
const signInWithPhoneNumber = async () => {
  try {
    await fb_signInWithPhoneNumber(phoneNumberRef.value);
  } catch (_error: any) {
    console.log(_error);
    error.value = _error.message;
  }
};
</script>

<style scoped>
#container {
  text-align: center;

  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

#container strong {
  font-size: 20px;
  line-height: 26px;
}

#container p {
  font-size: 16px;
  line-height: 22px;

  color: #8c8c8c;

  margin: 0;
}

#container a {
  text-decoration: none;
}
</style>
```
views\LoginPage.vue```
<template>
<ion-toast
    :is-open="showToast"
    :message="toastMessage"
    duration="2000"
  ></ion-toast>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Login</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content class="ion-padding">
      <form @submit.prevent="handleLogin">
        <ion-item>
          <ion-label position="stacked">Email</ion-label>
          <ion-input v-model="email" type="email" required></ion-input>
        </ion-item>
        <ion-item>
          <ion-label position="stacked">Password</ion-label>
          <ion-input v-model="password" type="password" required></ion-input>
        </ion-item>
        <ion-button type="submit" expand="block">Login</ion-button>
      </form>
      <!-- Display error messages -->
      <ion-text color="danger" v-if="loginError">{{ loginError }}</ion-text>
    </ion-content>
  </ion-page>
</template>

<script lang="ts">
import { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonItem, IonLabel, IonInput, IonButton, IonText, IonToast } from '@ionic/vue';
import { defineComponent, ref, watch } from 'vue';
import { useAuth } from '@/services/authService';

export default defineComponent({
  name: 'LoginPage',
  components: {
    IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonItem, IonLabel, IonInput, IonButton, IonText, IonToast
  },
  setup() {
    const { login, signInWithGoogle, error } = useAuth();
    const email = ref('');
    const password = ref('');
    const showToast = ref(false);
    const toastMessage = ref('');

    const handleLogin = async () => {
    try{
      await login(email.value, password.value);
      }
      catch(err) {
        toastMessage.value = err.message;
        showToast.value = true;
      }
    };

    const handleGoogleSignIn = async () => {
      await signInWithGoogle();
    };

    watch(error, async (newError) => {
      if (newError) {
        toastMessage.value = newError;
        showToast.value = true;
      }
    });

    return { email, password, handleLogin, handleGoogleSignIn, showToast, toastMessage };
  },
});
</script>

```
views\onboardingSlides.vue```
<template>
    <ion-page>
        <ion-content>
            <swiper :slides-per-view="1" :space-between="10" :pagination="{ clickable: true }">
                <swiper-slide>
                    <h2>Welcome to NomadCrew</h2>
                    <p>Discover new places with friends.</p>
                </swiper-slide>
                <swiper-slide>
                    <h2>Plan your next trip</h2>
                    <p>Find the best places to visit and things to do.</p>
                </swiper-slide>
                <swiper-slide>
                    <h2>Share your experiences</h2>
                    <p>Connect with friends and share your travel experiences.</p>
                </swiper-slide>
                <swiper-slide>
                    <h2>Live location</h2>
                    <p>Get live location updates of your friends!</p>
                </swiper-slide>
                <!-- Add more slides as needed -->
            </swiper>
            <ion-button @click="completeOnboarding">Get Started</ion-button>
        </ion-content>
    </ion-page>
</template>

<script>
import { IonContent, IonPage, IonButton } from '@ionic/vue';
import { Swiper, SwiperSlide } from 'swiper/vue';
import 'swiper/swiper-bundle.css';
import { defineComponent } from 'vue';
import { useRouter } from 'vue-router';

export default defineComponent({
    components: { IonContent, IonPage, IonButton, Swiper, SwiperSlide },
    setup() {
        const router = useRouter();

        const completeOnboarding = () => {
            localStorage.setItem('onboardingCompleted', 'true');
            router.push('/home'); // Navigate to the home screen or dashboard
        };

        return { completeOnboarding };
    },
});
</script>
```
views\RegisterPage.vue```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Register</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content class="ion-padding">
      <form @submit.prevent="handleRegister">
        <ion-item>
          <ion-label position="stacked">Email</ion-label>
          <ion-input v-model="email" type="email" required></ion-input>
        </ion-item>
        <ion-item>
          <ion-label position="stacked">Password</ion-label>
          <ion-input v-model="password" type="password" required></ion-input>
        </ion-item>
        <ion-button type="submit" expand="block">Register</ion-button>
      </form>
      <div class="social-login">
        <ion-button @click="signInWithGoogle" expand="block" color="danger">
          Register with Google
        </ion-button>
        <!-- <ion-button @click="signInWithFacebook" expand="block" color="primary">
          Register with Facebook
        </ion-button> -->
      </div>
    </ion-content>
  </ion-page>
</template>

<script lang="ts">
import { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonItem, IonLabel, IonInput, IonButton } from '@ionic/vue';
import { defineComponent, ref } from 'vue';
import { useAuth } from '@/services/authService'; // Adjust path as needed

export default defineComponent({
  components: {
    IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonItem, IonLabel, IonInput, IonButton
  },
  setup() {
    const email = ref('');
    const password = ref('');
    const { register, signInWithGoogle } = useAuth();

    const handleRegister = async () => {
      await register(email.value, password.value);
      // Additional logic like redirecting to another page upon successful registration
    };

    return { email, password, handleRegister, signInWithGoogle };
  },
});
</script>

<style scoped>
.social-login {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 20px;
}
</style>
```
views\Tab1Page.vue```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Tab 1</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content :fullscreen="true">
      <ion-header collapse="condense">
        <ion-toolbar>
          <ion-title size="large">Tab 1</ion-title>
        </ion-toolbar>
      </ion-header>

      <ExploreContainer name="Tab 1 page" />
    </ion-content>
  </ion-page>
</template>

<script setup lang="ts">
import { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';
import ExploreContainer from '@/components/ExploreContainer.vue';
</script>

```
views\Tab2Page.vue```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Tab 2</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content :fullscreen="true">
      <ion-header collapse="condense">
        <ion-toolbar>
          <ion-title size="large">Tab 2</ion-title>
        </ion-toolbar>
      </ion-header>

      <ExploreContainer name="Tab 2 page" />
    </ion-content>
  </ion-page>
</template>

<script setup lang="ts">
import { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';
import ExploreContainer from '@/components/ExploreContainer.vue';
</script>

```
views\Tab3Page.vue```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Tab 3</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content :fullscreen="true">
      <ion-header collapse="condense">
        <ion-toolbar>
          <ion-title size="large">Tab 3</ion-title>
        </ion-toolbar>
      </ion-header>

      <ExploreContainer name="Tab 3 page" />
    </ion-content>
  </ion-page>
</template>

<script setup lang="ts">
import { IonPage, IonHeader, IonToolbar, IonTitle, IonContent } from '@ionic/vue';
import ExploreContainer from '@/components/ExploreContainer.vue';
</script>

```
views\TabsPage.vue```
<template>
  <ion-page>
    <ion-tabs>
      <ion-router-outlet></ion-router-outlet>
      <ion-tab-bar slot="bottom">
        <ion-tab-button tab="tab1" href="/tabs/tab1">
          <ion-icon aria-hidden="true" :icon="triangle" />
          <ion-label>Tab 1</ion-label>
        </ion-tab-button>

        <ion-tab-button tab="tab2" href="/tabs/tab2">
          <ion-icon aria-hidden="true" :icon="ellipse" />
          <ion-label>Tab 2</ion-label>
        </ion-tab-button>

        <ion-tab-button tab="tab3" href="/tabs/tab3">
          <ion-icon aria-hidden="true" :icon="square" />
          <ion-label>Tab 3</ion-label>
        </ion-tab-button>
      </ion-tab-bar>
    </ion-tabs>
  </ion-page>
</template>

<script setup lang="ts">
import { IonTabBar, IonTabButton, IonTabs, IonLabel, IonIcon, IonPage, IonRouterOutlet } from '@ionic/vue';
import { ellipse, square, triangle } from 'ionicons/icons';
</script>

```
views\UserProfile.vue```
<template>
    <div v-if="isLoading">Loading ...</div>
    <div v-else-if="!user"></div>
    <div v-else class="profile-container">
      <ion-avatar>
        <img :src="user.picture" :alt="user.name" />
      </ion-avatar>
      <h2>{{ user.name }}</h2>
      <p>{{ user.email }}</p>
    </div>
  </template>
  
  <script lang="ts">
  import { defineComponent } from "vue";
  import { useAuth0 } from "@auth0/auth0-vue";
  import { IonAvatar } from "@ionic/vue";
  
  export default defineComponent({
    components: {
      IonAvatar,
    },
    setup() {
      const { user, isLoading } = useAuth0();
  
      return { user, isLoading };
    },
  });
  </script>
```
main.ts```
import { createApp } from 'vue'
import App from './App.vue'
import router from './router';

import { IonicVue } from '@ionic/vue';

/* Auth0 configuration */
import { createAuth0 } from '@auth0/auth0-vue';
import { domain as auth0Domain, clientId, callbackUri } from '../auth.config';


/* Core CSS required for Ionic components to work properly */
import '@ionic/vue/css/core.css';

/* Basic CSS for apps built with Ionic */
import '@ionic/vue/css/normalize.css';
import '@ionic/vue/css/structure.css';
import '@ionic/vue/css/typography.css';

/* Optional CSS utils that can be commented out */
import '@ionic/vue/css/padding.css';
import '@ionic/vue/css/float-elements.css';
import '@ionic/vue/css/text-alignment.css';
import '@ionic/vue/css/text-transformation.css';
import '@ionic/vue/css/flex-utils.css';
import '@ionic/vue/css/display.css';

/* Theme variables */
import './theme/variables.css';
import { newGetUser } from './firebase/firebase-service';

newGetUser().then(() => {
  const app = createApp(App)
  .use(IonicVue)
  .use(router);

  router.isReady().then(() => {
    app.mount("#app");
  });
})
  
```
vite-env.d.ts```
/// <reference types="vite/client" />

```
firebase\firebase-service.ts```
import { Capacitor } from "@capacitor/core";
import { initializeApp, getApps } from "firebase/app";
import { getDocs, getFirestore, query, collection } from "firebase/firestore";
import {
  getAuth,
  indexedDBLocalPersistence,
  initializeAuth,
  GoogleAuthProvider,
  signInWithCredential,
  signInWithEmailAndPassword,
  PhoneAuthProvider,
  TwitterAuthProvider,
  signInWithPhoneNumber as signInWithPhoneNumberWeb,
} from "firebase/auth";
import { FirebaseAuthentication } from "@capacitor-firebase/authentication";
import { ref, computed } from "vue";
import { RecaptchaVerifier } from "@firebase/auth";
import { firebaseConfig } from "./firebaseConfig";

const USER = ref<any>(null);
const APP =
  getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];
if (Capacitor.isNativePlatform()) {
  // require to work appropriately on native devices
  initializeAuth(APP, {
    persistence: indexedDBLocalPersistence,
  });
}
export const firestoreDB = getFirestore(APP);
export const currentUser = computed(() => (USER.value ? USER.value : null));

/******************************************************************************
 *
 * @returns verify I can actually query the database
 */
export const testQuery = async () => {
  const q = query(collection(firestoreDB, "links"));

  const querySnapshot = await getDocs(q);
  const response: any[] = [];
  querySnapshot.forEach((doc) => {
    // doc.data() is never undefined for query doc snapshots
    console.log(doc.id, " => ", doc.data());
    response.push({ ...doc.data(), id: doc.id });
  });

  return response;
};

/******************************************************************************
 *
 * user by social media auth functions to set user after credential login
 *
 * @param user
 * @returns
 */
export const setCurrentUser = (user: any) => {
  console.log("set current user", user);
  USER.value = user?.auth ? user?.auth.currentUser : user;
  return currentUser;
};

/******************************************************************************
 *
 */
export const newGetUser = () => {
  return new Promise(function (resolve) {
    // set user using js sdk auth state change user, we need to ensure
    // this user is logged in since we plan on using the database
    getAuth().onAuthStateChanged(async (user) => {
      USER.value = getAuth().currentUser;
      console.log("JS USER", getAuth().currentUser);
      resolve(currentUser);
    });
  });
};

/******************************************************************************
 *
 */
export const fb_signOut = async () => {
  const auth = getAuth();

  // sign out web
  await auth.signOut();

  // sign out capacitor
  await FirebaseAuthentication.signOut();

  USER.value = null;
};

/******************************************************************************
 *
 * @returns
 */
export const fb_signInWithGoogle = async () => {
  const result = await FirebaseAuthentication.signInWithGoogle();

  const credential = GoogleAuthProvider.credential(result.credential?.idToken);
  await signInWithCredential(getAuth(), credential);
  USER.value = getAuth().currentUser;
  return currentUser;
};

/******************************************************************************
 *
 * @returns
 */
export const fb_signInWithPhoneNumber = async (phoneNumber: string) => {
  if (!Capacitor.isNativePlatform()) {
    return fb_signInWithPhoneNumber_web(phoneNumber);
  }

  // 1. Start phone number verification
  const { verificationId } = await FirebaseAuthentication.signInWithPhoneNumber(
    {
      phoneNumber,
    }
  );

  // 2. Let the user enter the SMS code
  const verificationCode = window.prompt(
    "Please enter the verification code that was sent to your mobile device."
  );

  // 3. Sign in on the web layer using the verification ID and verification code.
  const credential = PhoneAuthProvider.credential(
    verificationId || "",
    verificationCode || ""
  );

  await signInWithCredential(getAuth(), credential as any);
  USER.value = getAuth().currentUser;
  return currentUser;
};

/******************************************************************************
 *
 * @returns
 */
export const fb_signInWithPhoneNumber_web = async (phoneNumber: string) => {
  debugger;
  // used for signing up using phone number on WEB
  (window as any).recaptchaVerifier = new RecaptchaVerifier(
    "sign-in-button",
    {
      size: "invisible",
      callback: (response: any) => {
        console.log(response);
        // reCAPTCHA solved, allow signInWithPhoneNumber.
        // onSignInSubmit();
        // need to account for issue with this, ie and error
      },
    },
    getAuth()
  );

  const appVerifier = (window as any)?.recaptchaVerifier;

  const auth = getAuth();
  const confirmationResult = await signInWithPhoneNumberWeb(
    auth,
    phoneNumber,
    appVerifier
  );
  // SMS sent. Prompt user to type the code from the message, then sign the
  // user in with confirmationResult.confirm(code).
  const verificationCode = window.prompt(
    "Please enter the verification code that was sent to your mobile device."
  );

  const result = await confirmationResult.confirm(verificationCode as string);
  // User signed in successfully.
  const user = result.user;
  console.log(user);

  const credential = PhoneAuthProvider.credential(
    confirmationResult.verificationId,
    verificationCode as string
  );
  await signInWithCredential(auth, credential);
  USER.value = getAuth().currentUser;
  return currentUser;
};

/******************************************************************************
 *
 * @param email
 * @param password
 * @returns
 */
export const fb_signInWithEmailAndPassword = async (
  email: string,
  password: string
) => {
  await signInWithEmailAndPassword(getAuth(), email, password);
  USER.value = getAuth().currentUser;
  return currentUser;
};

/******************************************************************************
 *
 * @returns
 */
export const fb_signInWithTwitter = async () => {
  const result = await FirebaseAuthentication.signInWithTwitter();

  const credential = TwitterAuthProvider.credential(
    result.credential?.idToken as string,
    result.credential?.secret as string
  );
  await signInWithCredential(getAuth(), credential);

  USER.value = getAuth().currentUser;
  return currentUser;
};
```
firebase\firebaseConfig.ts```
import { initializeApp } from "firebase/app";
import { ref } from "vue";

export const firebaseConfig = {
  apiKey: import.meta.env.VITE_APP_API_KEY,
  authDomain: import.meta.env.VITE_APP_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_APP_PROJECT_ID,
  storageBucket: import.meta.env.VITE_APP_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_APP_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_APP_APP_ID,
  measurementId: import.meta.env.VITE_APP_MEASUREMENT_ID
};


// export function useFirebaseSevice() {  
//   const Initialized = ref(false);
//   !Capacitor.isNativePlatform()
//       && FirebaseAuthentication.addListener("authStateChange", async (result) => {
//           if(result.user){
//               console.log("User is signed in", await getAuth().currentUser);
//           } else {
//               console.log("No user found");
//           }
//           initialized.value = true;
//       });   
// }
// // Initialize Firebase
// const app = initializeApp(firebaseConfig);

// export default app;

```
router\index.ts```
import { createRouter, createWebHistory } from '@ionic/vue-router';
import { RouteRecordRaw } from 'vue-router';
import TabsPage from '../views/TabsPage.vue'
import { currentUser } from '@/firebase/firebase-service';
import HomePage from '@/views/HomePage.vue';
import OnboardingSlides from '@/views/onboardingSlides.vue';

const guard = async (to: any, from: any, next: any) => {
  const loggedIn = !!currentUser?.value?.uid;
  if (loggedIn && ["home", "index"].includes(to.name)) {
    return next({ name: "private-page" });
  } else if (!loggedIn && ["home", "index"].includes(to.name)) {
    return next();
  } else if (!loggedIn) {
    return next({ name: "home" });
  } else {
    return next();
  }
};

const routes: Array<RouteRecordRaw> = [
  {
    path: '/',
    redirect: '/home',
    beforeEnter: guard
  },
  {
    path: '/home',
    name: 'Home',
    component: HomePage,
    beforeEnter: guard
  },
  {
    path: '/login',
    component: () => import('@/views/LoginPage.vue')
  },
  {
    path: '/register',
    component: () => import('@/views/RegisterPage.vue')
  },
  // {
  //   path: '/protected-route',
  //   component: () => import('@/views/ProtectedView.vue'),
  //   meta: { requiresAuth: true }
  // },  
  {
    path: "/private",
    name: "private-page",
    component: OnboardingSlides,
    beforeEnter: guard,
  },
  {
    path: '/tabs/',
    component: TabsPage,
    children: [
      {
        path: '',
        redirect: '/tabs/tab1'
      },
      {
        path: 'tab1',
        component: () => import('@/views/Tab1Page.vue') // Group Management
      },
      {
        path: 'tab2',
        component: () => import('@/views/Tab2Page.vue') // Live Location
      },
      {
        path: 'tab3',
        component: () => import('@/views/Tab3Page.vue') // Chat
      },
      // Add new tabs or routes for additional features as needed
    ]
  },
  // Define routes for other features outside the tab structure here
  // {
  //   path: '/expense-management',
  //   component: () => import('@/views/ExpenseManagementPage.vue')
  // },
  // More routes can be added here
]

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes
})


export default router;

```
